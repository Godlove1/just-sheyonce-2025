// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String    @id @default(cuid())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String         @id @default(cuid())
  name        String
  price       Int
  description String?
  category    Category?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId  String?
  hasSizes    Boolean        @default(false) // Add this field
  images      ProductImage[]
  sizes       ProductSize[] // Add this relation
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  OrderItem   OrderItem[]
}

// model for sizes
model ProductSize {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  size      String // This will store values like "S", "M", "L", etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductImage {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdminUser {
  id           String   @id @default(cuid())
  email        String   @unique
  address      String
  password     String
  phone        String
  name         String
  whatsApp     String
  snapchat     String
  instagram    String
  facebook     String
  twitter      String
  profileImage String
  role         String
  status       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Order {
  id          String      @id @default(cuid())
  totalAmount Float
  status      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
}


model GlobalDiscount {
  id         Int   @id @default(autoincrement())
  percentage Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status Boolean @default(false)
}